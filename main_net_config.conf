net {
  type = mainnet
  # type = testnet
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.engine = "LEVELDB",
  db.sync = false,
  db.directory = "database",
  index.directory = "index",
  transHistory.switch = "on",
  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, executive, executive_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
  //      {
  //        name = "account1",
  //        path = "storage_directory_test",
  //        createIfMissing = true,
  //        paranoidChecks = true,
  //        verifyChecksums = true,
  //        compressionType = 1,        // compressed with snappy
  //        blockSize = 4096,           // 4  KB =         4 * 1024 B
  //        writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
  //        cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
  //        maxOpenFiles = 100
  //      },
  //      {
  //        name = "account1-index",
  //        path = "storage_directory_test",
  //        createIfMissing = true,
  //        paranoidChecks = true,
  //        verifyChecksums = true,
  //        compressionType = 1,        // compressed with snappy
  //        blockSize = 4096,           // 4  KB =         4 * 1024 B
  //        writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
  //        cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
  //        maxOpenFiles = 100
  //      },
  {
      name = "DelegatedResource",
      maxOpenFiles = 100
    },
    {
      name = "DelegatedResourceAccountIndex",
      maxOpenFiles = 100
    },
    {
      name = "IncrementalMerkleTree",
      maxOpenFiles = 100
    },
    {
      name = "IncrementalMerkleVoucher",
      maxOpenFiles = 100
    },
    {
      name = "abi",
      maxOpenFiles = 100
    },
    {
      name = "account",
      maxOpenFiles = 100
    },
    {
      name = "account-asset-issue",
      maxOpenFiles = 100
    },
    {
      name = "account-index",
      maxOpenFiles = 100
    },
    {
      name = "account-trace",
      maxOpenFiles = 100
    },
    {
      name = "accountTrie",
      maxOpenFiles = 100
    },
    {
      name = "accountid-index",
      maxOpenFiles = 100
    },
    {
      name = "asset-issue",
      maxOpenFiles = 100
    },
    {
      name = "asset-issue-v2",
      maxOpenFiles = 100
    },
    {
      name = "balance-trace",
      maxOpenFiles = 100
    },
    {
      name = "block",
      maxOpenFiles = 100
    },
    {
      name = "block-index",
      maxOpenFiles = 100
    },
    {
      name = "block_KDB",
      maxOpenFiles = 100
    },
    {
      name = "code",
      maxOpenFiles = 100
    },
    {
      name = "common",
      maxOpenFiles = 100
    },
    {
      name = "common-database",
      maxOpenFiles = 100
    },
    {
      name = "contract",
      maxOpenFiles = 100
    },
    {
      name = "delegation",
      maxOpenFiles = 100
    },
    {
      name = "exchange",
      maxOpenFiles = 100
    },
    {
      name = "exchange-v2",
      maxOpenFiles = 100
    },
    {
      name = "info",
      maxOpenFiles = 100
    },
    {
      name = "market_account",
      maxOpenFiles = 100
    },
    {
      name = "market_order",
      maxOpenFiles = 100
    },
    {
      name = "market_pair_price_to_order",
      maxOpenFiles = 100
    },
    {
      name = "market_pair_to_price",
      maxOpenFiles = 100
    },
    {
      name = "nullifier",
      maxOpenFiles = 100
    },
    {
      name = "pbft-sign-data",
      maxOpenFiles = 100
    },
    {
      name = "peers",
      maxOpenFiles = 100
    },
    {
      name = "properties",
      maxOpenFiles = 100
    },
    {
      name = "proposal",
      maxOpenFiles = 100
    },
    {
      name = "recent-block",
      maxOpenFiles = 100
    },
    {
      name = "storage-row",
      maxOpenFiles = 100
    },
    {
      name = "tmp",
      maxOpenFiles = 100
    },
    {
      name = "trans",
      maxOpenFiles = 100
    },
    {
      name = "trans-cache",
      maxOpenFiles = 100
    },
    {
      name = "transactionHistoryStore",
      maxOpenFiles = 100
    },
    {
      name = "transactionRetStore",
      maxOpenFiles = 100
    },
    {
      name = "tree-block-index",
      maxOpenFiles = 100
    },
    {
      name = "utxo",
      maxOpenFiles = 100
    },
    {
      name = "votes",
      maxOpenFiles = 100
    },
    {
      name = "executive",
      maxOpenFiles = 100
    },
    {
      name = "executive_schedule",
      maxOpenFiles = 100
    },
    {
      name = "zkProof",
      maxOpenFiles = 100
    }
  ]

  needToUpdateAsset = true

  //dbsettings is needed when using rocksdb as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //we'd sstabilagly recommend that do not modify it unless you know every item's meaning clearly.
  dbSettings = {
    levelNumber = 7
    //compactThreads = 32
    blocksize = 64  // n * KB
    maxBytesForLevelBase = 256  // n * MB
    maxBytesForLevelMultiplier = 10
    level0FileNumCompactionTrigger = 4
    targetFileSizeBase = 256  // n * MB
    targetFileSizeMultiplier = 1
  }

  //backup settings when using rocks db as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //if you want to use the backup plugin, please confirm set the db.version=2 and db.engine="ROCKSDB" above.
  backup = {
    enable = false  // indicate whether enable the backup plugin
    propPath = "prop.properties" // record which bak directory is valid
    bak1path = "bak1/database" // you must set two backup directories to prevent application halt unexpected(e.g. kill -9).
    bak2path = "bak2/database"
    frequency = 10000   // indicate backup db once every 10000 blocks processed.
  }

  balance.history.lookup = false
}

node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}

node.backup {
  # my priority, each member should use different priority
  priority = 8

  # udp listen port, each member should have the save configuration
  port = 10000

  # time interval to send keepAlive message, each member should have the save configuration
  keepAliveInterval = 3000

  # peer's ip list, can't contain mine
  members = [
    # "ip",
    # "ip"
  ]
}

crypto {
  engine = "eckey"
}

node {
  # trust node for solidity node
  # trustNode = "ip:port"
  trustNode = "127.0.0.1:50051"

  # expose extension api to public or not
  walletExtensionApi = true

  listen.port = 18888

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16

  connectFactor = 0.3
  activeConnectFactor = 0.1

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  maxHttpConnectNumber = 50

  minParticipationRate = 15

  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  p2p {
    version = 7777777 # 7777777: mainnet; 1234567890: testnet
  }

  active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  fastForward = [
    
  ]

  http {
    fullNodePort = 8090
    solidityPort = 8091
  }

  rpc {
    port = 50051
    #solidityPort = 50061
    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 1
  }

  # number of solidity thread in the FullNode.
  # If accessing solidity rpc and http interface timeout, could increase the number of threads,
  # The default value is the number of cpu cores of the machine.
  #solidity.threads = 8

  # Limits the maximum percentage (default 75%) of producing block interval
  # to provide sufficient time to perform other operations e.g. broadcast block
  # blockProducedTimeOut = 75

  # Limits the maximum number (default 700) of transaction from network layer
  # netMaxStbPerSecond = 700

  # open the history query APIs(http&GRPC) when node is a lite fullNode,
  # like {getBlockByNum, getBlockByID, getTransactionByID...}.
  # default: false.
  # note: above APIs may return null even if blocks and transactions actually are on the blockchain
  # when opening on a lite fullnode. only open it if the consequences being clearly known
  # openHistoryQueryWhenLiteFN = false
}

## rate limiter config
rate.limiter = {
  # Every api could be set a specific rate limit strategy. Three strategy are supported:GlobalPreemptibleAdapter、IPQPSRateLimiterAdapte、QpsRateLimiterAdapter
  # GlobalPreemptibleAdapter: permit is the number of preemptible resource, every client must apply one resourse
  #       before do the request and release the resource after got the reponse automaticlly. permit should be a Integer.
  # QpsRateLimiterAdapter: qps is the average request count in one second supported by the server, it could be a Double or a Integer.
  # IPQPSRateLimiterAdapter: similar to the QpsRateLimiterAdapter, qps could be a Double or a Integer.
  # If do not set, the "default strategy" is set.The "default startegy" is based on QpsRateLimiterAdapter, the qps is set as 10000.
  #
  # Sample entries:
  #
  http = [
    #  {
    #    component = "GetNowBlockServlet",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },

    #  {
    #    component = "GetAccountServlet",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },

    #  {
    #    component = "ListExecutivesServlet",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  }
  ],

  rpc = [
    #  {
    #    component = "protocol.Wallet/GetBlockByLatestNum2",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },

    #  {
    #    component = "protocol.Wallet/GetAccount",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },

    #  {
    #    component = "protocol.Wallet/ListExecutives",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },
  ]

}


seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  # example:
  # ip.list = [
  #   "ip:port",
  #   "ip:port"
  # ]
  ip.list = [	"159.65.20.62:18888",
		"137.184.98.192:18888",
		"3.17.39.193:18888",
		"178.128.35.129:18888",
		"142.93.34.246:18888",
		"134.122.117.60:18888",
		"157.230.17.155:18888",
		"3.1.221.90:18888",
		"13.232.56.223:18888",
		"18.179.20.34:18888",
		"13.211.79.37:18888",
		"18.228.222.25:18888",
		"157.175.65.55:18888",
		"99.79.47.154:18888",
		"13.208.248.253:18888",
		"13.125.46.212:18888",
		"13.245.18.81:18888",
		"16.170.40.163:18888",
		"54.177.30.106:18888",
		"18.167.68.198:18888",
		"159.65.20.185:18888"	]
}

genesis.block = {
  # Reserve balance
  assets = [
    {
	accountName = "Stabila"
	accountType = "AssetIssue"
	address = "Se5vurRKcneAAVttEWneVtk74gXisWAwef"
	balance = "10000000000000"
	},
	{
	accountName = "Unit"
	accountType = "AssetIssue"
	address = "SZXve9er8mvy24GExjo2QfNm72mZE3zegx"
	balance = "0"
	},
	{
	accountName = "Moneta"
	accountType = "AssetIssue"
	address = "SkQ61twk5ENsZEv69kx1ij9jxfeeEh12EZ"
	balance = "20000000000000"
	},
	{
	accountName = "Blackhole"
	accountType = "AssetIssue"
	address = "ShVkVQ7Xkr6uWZJPzjm6WjETCnY2EMaqEk"
	balance = "-30000000000000"
	}
  ]

  executives = [
    {
	address: STpysaUbsLrr9MDnY15DCmsjZzKcTjfLir
	url = "https://quantiacapital.com"
	voteCount = 10000
	},
	{
	address: SSiYn5WPPrzfKcHAcZvjqJGx9TvEMTfsSF
	url = "http://cloudbreakassets.com/"
	voteCount = 10000
	},
	{
	address: Sh8qvtNaxGSqgFCn9YcKmtJeuXfUMUE4mL
	url = "http://crypton.capital"
	voteCount = 10000
	},
	{
	address: SZZoWiZvRRFXq7AzuppEeMcjrp845G7MFP
	url = "http://kosmos.capital/"
	voteCount = 10000
	},
	{
	address: SXzimPU7TSdwvp1YzLQ4dUqKAtoFJDYDRc
	url = "http://www.pod.capital/"
	voteCount = 10000
	},
	{
	address: SSzxGB4i5a7rZ1GHCRBtp7NGR4DcfsCSAW
	url = "https://moneta.holdings"
	voteCount = 10000
	},
	{
	address: SNuQDrtywDBbu4tMoGXs5WCq8C2haAdcFH
	url = "http://www.polybiuscapital.com/"
	voteCount = 10000
	},
	{
	address: SXJF6Kpxvsq1mbfsKm3QGmoBizvfyc6AL3
	url = "http://www.sapienventures.vc/"
	voteCount = 10000
	},
	{
	address: ST1MHgCWnDxr5XqrfV5rB2DUSCU9PYMUqv
	url = "https://moneta.holdings"
	voteCount = 10000
	},
	{
	address: SgnX32fyJ6rBWHQVrP8pxwa77idMUr1Lbb
	url = "https://magnetcapital.com.au/"
	voteCount = 10000
	},
	{
	address: SSTypQZUwDTRtinndV9p4x5xnwX17LCg8j
	url = "https://www.antiherocapital.com/"
	voteCount = 10000
	},
	{
	address: SeqxRUhiFqpJUWa9qN7gLqmwAVW3YPfyNU
	url = "https://www.apollocap.io"
	voteCount = 10000
	},
	{
	address: SYfX5djjBGyEC44s8ZPDYtwhAtA1axKgA4
	url = "https://moneta.holdings"
	voteCount = 10000
	},
	{
	address: SYr7UWqJeps2iJNBVivHVKkf9NZ1xKEP6C
	url = "https://stabilascan.org"
	voteCount = 10000
	},
	{
	address: SepVZpUksD72xW24EVYCdTtSHmmbVprzdc
	url = "https://www.blockchainPartners.com.au"
	voteCount = 10000
	},
	{
	address: SeTxLvPg699t3BZ83oaheZWUM7snfBhdLi
	url = "https://www.bxecapital.com/"
	voteCount = 10000
	},
	{
	address: SfsgsrEdY7JMFgsPSePXADPadSiLqt3tQk
	url = "https://www.countinghousefund.com"
	voteCount = 10000
	},
	{
	address: SavMezPGCjoF8aQ6gzPsw6eSmcaW87kMyV
	url = "https://www.digichaincapital.com.au/"
	voteCount = 10000
	},
	{
	address: SS57jPNK7jio3ddK86N3z6kb7LSjiYGKFz
	url = "https://www.digitalx.com"
	voteCount = 10000
	},
	{
	address: SkPxdEwnMSs58VmZyrz5CCdC4qEBBNfUGQ
	url = "https://www.every.capital/"
	voteCount = 10000
	},
	{
	address: SScVaiBXtwzP56DXfL8rcMDSbCfBw9T98Q
	url = "https://www.firstdigitalcapital.com.au/"
	voteCount = 10000
	}
  ]

  timestamp = "0" #2021-8-26 12:00:00

  parentHash = "0xe7777777baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780377f"
  
}

// Optional.The default is empty.
// It is used when the executive account has set the executivePermission.
// When it is not empty, the localExecutiveAccountAddress represents the address of the executive account,
// and the localexecutive is configured with the private key of the executivePermissionAddress in the executive account.
// When it is empty,the localexecutive is configured with the private key of the executive account.

//localExecutiveAccountAddress =

//localexecutive = []

localexecutivekeystore = [
  "localwitnesskeystore.json"
]

block = {
  needSyncCheck = true
  maintenanceTimeInterval = 21600000
  proposalExpireTime = 259200000 // 3 day: 259200000(ms)
}

# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
# stb.reference.block = "head" // head;solid;

# This property sets the number of milliseconds after the creation of the transaction that is expired, default value is  60000.
# stb.expiration.timeInMilliseconds = 60000

vm = {
  supportConstant = false
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = false

  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}

committee = {
  allowCreationOfContracts = 0  //mainnet:0 (reset by committee),test:1
  allowAdaptiveEnergy = 0  //mainnet:0 (reset by committee),test:1
}

event.subscribe = {
  native = {
    useNativeQueue = true // if true, use native message queue, else use event plugin.
    bindport = 5555 // bind port
    sendqueuelength = 1000 //max length of send queue
  }

  path = "" // absolute path of plugin
  server = "" // target server address to receive event triggers
  dbconfig = "" // dbname|username|password
  contractParse = true,
  topics = [
    {
      triggerName = "block" // block trigger, the value can't be modified
      enable = false
      topic = "block" // plugin topic, the value could be modified
    },
    {
      triggerName = "transaction"
      enable = false
      topic = "transaction"
    },
    {
      triggerName = "contractevent"
      enable = false
      topic = "contractevent"
    },
    {
      triggerName = "contractlog"
      enable = false
      topic = "contractlog"
    },
    {
      triggerName = "solidity" // solidity block event trigger, the value can't be modified
      enable = true            // the default value is true
      topic = "solidity"
    },
    {
      triggerName = "solidityevent"
      enable = false
      topic = "solidityevent"
    },
    {
      triggerName = "soliditylog"
      enable = false
      topic = "soliditylog"
    }
  ]

  filter = {
    fromblock = "" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
    toblock = "" // the value could be "", "latest" or a specified block number as end of the queried range
    contractAddress = [
      "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
    ]

    contractTopic = [
      "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
    ]
  }

}
